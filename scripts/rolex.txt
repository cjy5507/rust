# Overview
Rolex 매장 자동 예약 데스크탑 프로그램

이 프로그램은 사용자가 원하는 Rolex 매장에 원하는 날짜와 시간에 자동으로 예약을 시도할 수 있도록 지원합니다. 사용자는 데스크탑 앱을 통해 로그인하고, 매장 정보를 확인한 뒤 예약 정보를 입력하면, 예약 시간에 맞춰 Playwright 기반 자동화가 실행되어 인증 및 예약을 자동으로 처리합니다. 반복적인 수동 예약 시도를 줄이고, 예약 성공률을 높이는 것이 목적입니다.

# Core Features
- **사용자 인증 및 로그인**
  - Clerk 기반 인증(이메일/소셜)
  - 인증 성공 시 메인화면 진입
- **사용자 설정 화면**
  - 공통 설정: 이메일, 통신사(SK, KT, LGU+), 메시지
  - 매장별 설정: 실행 시간(날짜+시간), 방문 예정일/시간
- **매장 정보 조회**
  - 백엔드(외부 API, 초기엔 목데이터)에서 매장 리스트 불러오기
  - 매장 정보: 매장이름, 인증 URL, 예약 URL
- **예약 요청 및 관리**
  - 사용자가 매장, 날짜, 시간 선택 후 예약 요청
  - 예약 요청 내역 및 상태 확인
- **예약 자동화(Playwright)**
  - 예약시간 10분 전(또는 즉시) Playwright 워커 실행
  - 탭 2개(인증/예약)로 동시 준비, 예약시간에 맞춰 자동화
  - 여러 매장 예약을 병렬로 자동화(동시 실행)
- **자동화 제어(시작/중지)**
  - 전체 시작/중지 버튼: 모든 매장 자동화 병렬 실행/중단
  - 매장별 개별 시작/중지 버튼(확장성 고려)
- **상태/알림**
  - 예약 진행상태, 성공/실패 결과 Toast 등으로 실시간 알림

# User Experience
- **User Persona**: Rolex 매장 예약을 원하는 일반 사용자
- **Key User Flow**:
  1. 프로그램 실행 → 로그인
  2. 공통/매장별 설정 입력
  3. 매장 리스트 확인
  4. 매장/날짜/시간 선택 및 예약 요청
  5. 전체/개별 시작 버튼으로 자동화 실행(여러 매장 병렬)
  6. 전체/개별 중지 버튼으로 자동화 중단
  7. 예약 대기/진행/완료 상태 확인
- **UI/UX**:
  - 직관적 예약 폼, 예약 상태 실시간 표시
  - 전체/개별 시작·중지 버튼
  - 예약 성공/실패 시 명확한 알림

# Technical Architecture
- **System Components**:
  - Tauri + React(Vite): 데스크탑 UI, 예약 요청/상태 관리, 자동화 제어
  - Node.js(Playwright): 예약 자동화 워커(여러 매장 병렬 실행)
  - 외부 API(백엔드): 매장 정보, 예약 요청/상태 관리(초기엔 mock)
- **Data Models**:
  - 매장: id, name, authUrl, reserveUrl
  - 예약: userId, storeId, date, time, status
  - 사용자 설정: email, carrier, message, storeSettings
  - 매장별 설정: storeId, runAt, visitDate, visitTime
  - 자동화 상태: storeId, status(idle/scheduled/running/success/error/stopped), pid, log
- **APIs/Integrations**:
  - GET /stores: 매장 리스트
  - POST /reserve: 예약 요청
  - 예약 자동화 워커와의 IPC/REST 연동(병렬 실행/중지 제어)
- **Infra**:
  - 데스크탑 앱(Tauri), Node.js 워커, 외부 API 서버(초기엔 mock)

# Development Roadmap
- **MVP**
  - 로그인/인증(Clerk)
  - 사용자 설정(공통/매장별)
  - 매장 정보 mock API/화면
  - 예약 요청 폼/상태 관리
  - Playwright 워커(탭 2개, 인증/예약 자동화, 예약시간 맞춤 실행, 병렬 실행)
  - 전체/개별 시작·중지 버튼, 상태 표시
  - 예약 결과/상태 표시, Toast 알림
- **Future**
  - 실제 백엔드 API 연동
  - 예약 실패 자동 재시도, 로그 저장
  - 예약 성공시 이메일/앱 알림
  - 예약 내역 히스토리, 통계 등

# Logical Dependency Chain
1. 매장 정보 구조/화면 → 2. 인증/로그인 → 3. 사용자 설정(공통/매장별) → 4. 예약 요청/상태 관리 → 5. Playwright 워커(자동화, 병렬 실행/제어) → 6. 예약 결과/알림
- 최소한의 UI/기능으로 예약 자동화 MVP 구현 → 이후 기능 확장

# Risks and Mitigations
- **사이트 구조 변경/캡차 등으로 자동화 실패**: 예외처리, 재시도, 로그 필수
- **예약시간 동기화 문제**: 시스템 시간 동기화, 예약시간 오차 허용 범위 설정
- **인증/세션 만료**: 인증탭 자동 새로고침, 세션 만료 감지 후 재인증
- **외부 API 장애**: mock 데이터 fallback, 에러 알림
- **병렬 자동화 워커 관리**: 워커 충돌/리소스 부족 시 개별 중지/재시도, 상태 모니터링

# Appendix
- Playwright 예약 자동화 샘플 코드, 매장 mock 데이터 예시, UI 와이어프레임, 상태관리/병렬 실행 예시 등 
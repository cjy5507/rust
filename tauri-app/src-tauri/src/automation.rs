// ÌÅ¨Î°úÎÖ∏ÎîîÍ∑∏Îßà ÏòàÏïΩ ÏûêÎèôÌôî Î™®Îìà (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)
use chromiumoxide::Page; 
use std::time::Duration; 

// 1. Ïø†ÌÇ§ ÌåùÏóÖ Ï≤òÎ¶¨ Ìï®Ïàò (Ï†ïÌôïÌïú ÏÖÄÎ†âÌÑ∞ ÏÇ¨Ïö©)
pub async fn handle_initial_popup(page: &Page) -> Result<(), String> {
    println!("üç™ Ïø†ÌÇ§ ÌåùÏóÖ Ï≤òÎ¶¨ Ï§ë...");
    tokio::time::sleep(Duration::from_secs(2)).await;

    for attempt in 0..3 {
        println!("üç™ Ïø†ÌÇ§ ÌåùÏóÖ Ï≤òÎ¶¨ ÏãúÎèÑ {}/3", attempt + 1);
        
        // ÌÅ¨Î°úÎÖ∏ÎîîÍ∑∏Îßà Ï†ÑÏö© Ïø†ÌÇ§ ÏàòÎùΩ Î≤ÑÌäº ÏÖÄÎ†âÌÑ∞
        let popup_click_js = r#"
            (() => {
                const acceptBtn = document.querySelector('.cookies__button--accept');
                if (acceptBtn && window.getComputedStyle(acceptBtn).display !== 'none') {
                    console.log('Ïø†ÌÇ§ ÏàòÎùΩ Î≤ÑÌäº Ï∞æÏùå');
                    acceptBtn.click();
                    return true;
                }
                return false;
            })()
        "#;

        match page.evaluate_expression(popup_click_js.to_string()).await {
            Ok(result) => {
                if let Ok(success) = result.into_value::<bool>() {
                    if success {
                        println!("‚úÖ Ïø†ÌÇ§ ÌåùÏóÖ Ï≤òÎ¶¨ ÏôÑÎ£å");
                        tokio::time::sleep(Duration::from_secs(2)).await;
                        return Ok(());
                    }
                }
            }
            Err(_) => {}
        }
        
        tokio::time::sleep(Duration::from_secs(1)).await;
    }
    
    println!("‚ÑπÔ∏è Ïø†ÌÇ§ ÌåùÏóÖÏù¥ ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ Ï≤òÎ¶¨Îê®");
    Ok(())
}

// 2. Î∞©Î¨∏ ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ (Ï†ïÌôïÌïú ÏÖÄÎ†âÌÑ∞)
pub async fn click_visit_reservation_button(page: &Page) -> Result<(), String> {
    println!("üìÖ Î∞©Î¨∏ ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäº Ï∞æÎäî Ï§ë...");
    tokio::time::sleep(Duration::from_secs(2)).await;

    for attempt in 0..5 {
        println!("üìÖ Î∞©Î¨∏ ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÎèÑ {}/5", attempt + 1);
        
        let reservation_click_js = r#"
            (() => {
                const reservationBtn = document.querySelector('a[href="https://www.chronodigmwatch.co.kr/rolex/contact-seoul/appointment/"]');
                if (reservationBtn && window.getComputedStyle(reservationBtn).display !== 'none') {
                    console.log('Î∞©Î¨∏ ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäº Ï∞æÏùå');
                    reservationBtn.scrollIntoView({behavior: 'instant', block: 'center'});
                    reservationBtn.click();
                    return true;
                }
                return false;
            })()
        "#;

        match page.evaluate_expression(reservation_click_js.to_string()).await {
            Ok(result) => {
                if let Ok(success) = result.into_value::<bool>() {
                    if success {
                        println!("‚úÖ Î∞©Î¨∏ ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏôÑÎ£å");
                        tokio::time::sleep(Duration::from_secs(1)).await; // Îπ†Î•∏ ÏßÑÌñâ
                        return Ok(());
                    }
                }
            }
            Err(_) => {}
        }
        
        tokio::time::sleep(Duration::from_secs(2)).await;
    }
    
    Err("Î∞©Î¨∏ ÏòàÏïΩÌïòÍ∏∞ Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.".to_string())
}

// 3. Î°§Î†âÏä§ Ïª¨Î†âÏÖò Î≤ÑÌäº ÌÅ¥Î¶≠ (Ï†ïÌôïÌïú ÏÖÄÎ†âÌÑ∞)
pub async fn click_rolex_collection_button(page: &Page) -> Result<(), String> {
    println!("üõçÔ∏è Î°§Î†âÏä§ Ïª¨Î†âÏÖò Î≤ÑÌäº Ï∞æÎäî Ï§ë...");
    tokio::time::sleep(Duration::from_secs(2)).await;

    for attempt in 0..5 {
        println!("üõçÔ∏è Î°§Î†âÏä§ Ïª¨Î†âÏÖò Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÎèÑ {}/5", attempt + 1);
        
        let rolex_click_js = r#"
            (() => {
                const collectionBtn = document.querySelector('a[onclick="select_type(\'collection\');"]');
                if (collectionBtn && window.getComputedStyle(collectionBtn).display !== 'none') {
                    console.log('Î°§Î†âÏä§ Ïª¨Î†âÏÖò Î≤ÑÌäº Ï∞æÏùå');
                    collectionBtn.scrollIntoView({behavior: 'instant', block: 'center'});
                    collectionBtn.click();
                    return true;
                }
                return false;
            })()
        "#;

        match page.evaluate_expression(rolex_click_js.to_string()).await {
            Ok(result) => {
                if let Ok(success) = result.into_value::<bool>() {
                    if success {
                        println!("‚úÖ Î°§Î†âÏä§ Ïª¨Î†âÏÖò Î≤ÑÌäº ÌÅ¥Î¶≠ ÏôÑÎ£å");
                        tokio::time::sleep(Duration::from_secs(1)).await; // Îπ†Î•∏ ÏßÑÌñâ
                        return Ok(());
                    }
                }
            }
            Err(_) => {}
        }
        
        tokio::time::sleep(Duration::from_secs(2)).await;
    }
    
    Err("Î°§Î†âÏä§ Ïª¨Î†âÏÖò Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.".to_string())
}

// 4. ÎèôÏùòÌï©ÎãàÎã§ Î≤ÑÌäº ÌÅ¥Î¶≠ (Ï†ïÌôïÌïú ÏÖÄÎ†âÌÑ∞)
pub async fn click_agree_button(page: &Page) -> Result<(), String> {
    println!("‚úÖ ÎèôÏùòÌï©ÎãàÎã§ Î≤ÑÌäº Ï∞æÎäî Ï§ë...");
    tokio::time::sleep(Duration::from_secs(2)).await;

    for attempt in 0..3 {
        println!("‚úÖ ÎèôÏùòÌï©ÎãàÎã§ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÎèÑ {}/3", attempt + 1);
        
        let agree_click_js = r#"
            (() => {
                const agreeBtn = document.querySelector('button.rolex-button');
                if (agreeBtn && window.getComputedStyle(agreeBtn).display !== 'none') {
                    const text = agreeBtn.textContent.trim();
                    if (text.includes('ÎèôÏùòÌï©ÎãàÎã§')) {
                        console.log('ÎèôÏùòÌï©ÎãàÎã§ Î≤ÑÌäº Ï∞æÏùå:', text);
                        agreeBtn.scrollIntoView({behavior: 'instant', block: 'center'});
                        agreeBtn.click();
                        return true;
                    }
                }
                return false;
            })()
        "#;

        match page.evaluate_expression(agree_click_js.to_string()).await {
            Ok(result) => {
                if let Ok(success) = result.into_value::<bool>() {
                    if success {
                        println!("‚úÖ ÎèôÏùòÌï©ÎãàÎã§ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏôÑÎ£å");
                        tokio::time::sleep(Duration::from_secs(1)).await; // Îπ†Î•∏ ÏßÑÌñâ
                        return Ok(());
                    }
                }
            }
            Err(_) => {}
        }
        
        tokio::time::sleep(Duration::from_secs(1)).await;
    }
    
    Err("ÎèôÏùòÌï©ÎãàÎã§ Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.".to_string())
}

// 5. Î∞©Î¨∏ ÎÇ†Ïßú ÏÑ†ÌÉù (Ï†ïÌôïÌïú ÏÖÄÎ†âÌÑ∞)
pub async fn select_visit_date(page: &Page, visit_date: &str) -> Result<(), String> {
    println!("üìÖ Î∞©Î¨∏ ÎÇ†Ïßú ÏÑ†ÌÉù Ï§ë: {}", visit_date);
    tokio::time::sleep(Duration::from_secs(2)).await;

    // Î®ºÏ†Ä ÏòàÏïΩ ÎßàÍ∞ê Î©îÏãúÏßÄÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    let check_closed_js = r#"
        (() => {
            const body = document.body.textContent;
            return body.includes('Ïò®ÎùºÏù∏ ÏòàÏïΩÏù¥ ÎßàÍ∞êÎêòÏóàÏäµÎãàÎã§') || 
                   body.includes('ÏòàÏïΩÏù¥ ÎßàÍ∞ê') ||
                   body.includes('ÎßàÍ∞ê');
        })()
    "#;

    match page.evaluate_expression(check_closed_js.to_string()).await {
        Ok(result) => {
            if let Ok(is_closed) = result.into_value::<bool>() {
                if is_closed {
                    return Err("Ïò®ÎùºÏù∏ ÏòàÏïΩÏù¥ ÎßàÍ∞êÎêòÏóàÏäµÎãàÎã§. Îã§Ïùå ÏòàÏïΩ Ïò§Ìîà ÏãúÍ∞ÑÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.".to_string());
                }
            }
        }
        Err(_) => {}
    }

    for attempt in 0..3 {
        println!("üìÖ Î∞©Î¨∏ ÎÇ†Ïßú ÏÑ†ÌÉù ÏãúÎèÑ {}/3", attempt + 1);
        
        let date_select_js = format!(r#"
            (() => {{
                const targetDate = '{}';
                const dateBtn = document.querySelector('#appointment .datetime-form .date-list ul > li[data-date="' + targetDate + '"]');
                
                if (dateBtn && !dateBtn.classList.contains('off') && window.getComputedStyle(dateBtn).display !== 'none') {{
                    console.log('ÎÇ†Ïßú Î≤ÑÌäº Ï∞æÏùå:', targetDate);
                    dateBtn.scrollIntoView({{behavior: 'instant', block: 'center'}});
                    dateBtn.click();
                    return true;
                }}
                return false;
            }})()
        "#, visit_date);

        match page.evaluate_expression(date_select_js).await {
            Ok(result) => {
                if let Ok(success) = result.into_value::<bool>() {
                    if success {
                        println!("‚úÖ Î∞©Î¨∏ ÎÇ†Ïßú ÏÑ†ÌÉù ÏôÑÎ£å: {}", visit_date);
                        tokio::time::sleep(Duration::from_secs(1)).await; // Îπ†Î•∏ ÏßÑÌñâ
                        return Ok(());
                    }
                }
            }
            Err(_) => {}
        }
        
        tokio::time::sleep(Duration::from_secs(2)).await;
    }
    
    Err(format!("Î∞©Î¨∏ ÎÇ†Ïßú({})Î•º ÏÑ†ÌÉùÌï† Ïàò ÏóÜÏäµÎãàÎã§.", visit_date))
}

// 6. Î∞©Î¨∏ ÏãúÍ∞Ñ ÏÑ†ÌÉù (Ï†ïÌôïÌïú ÏÖÄÎ†âÌÑ∞)
pub async fn select_visit_time(page: &Page, visit_time: &str) -> Result<(), String> {
    println!("üïê Î∞©Î¨∏ ÏãúÍ∞Ñ ÏÑ†ÌÉù Ï§ë: {}", visit_time);
    tokio::time::sleep(Duration::from_secs(2)).await;

    // ÏãúÍ∞ÑÏùÑ Î∂ÑÏúºÎ°ú Î≥ÄÌôò (17:30 -> 1050Î∂Ñ)
    let time_in_minutes = convert_time_to_minutes(visit_time)?;

    for attempt in 0..3 {
        println!("üïê Î∞©Î¨∏ ÏãúÍ∞Ñ ÏÑ†ÌÉù ÏãúÎèÑ {}/3", attempt + 1);
        
        let time_select_js = format!(r#"
            (() => {{
                const timeValue = '{}';
                const timeBtn = document.querySelector('#appointment .datetime-form .time-list ul > li[data-time="' + timeValue + '"]');
                
                if (timeBtn && !timeBtn.classList.contains('off') && window.getComputedStyle(timeBtn).display !== 'none') {{
                    console.log('ÏãúÍ∞Ñ Î≤ÑÌäº Ï∞æÏùå:', timeValue);
                    timeBtn.scrollIntoView({{behavior: 'instant', block: 'center'}});
                    timeBtn.click();
                    return true;
                }}
                return false;
            }})()
        "#, time_in_minutes);

        match page.evaluate_expression(time_select_js).await {
            Ok(result) => {
                if let Ok(success) = result.into_value::<bool>() {
                    if success {
                        println!("‚úÖ Î∞©Î¨∏ ÏãúÍ∞Ñ ÏÑ†ÌÉù ÏôÑÎ£å: {} ({}Î∂Ñ)", visit_time, time_in_minutes);
                        tokio::time::sleep(Duration::from_secs(1)).await; // Îπ†Î•∏ ÏßÑÌñâ
                        return Ok(());
                    }
                }
            }
            Err(_) => {}
        }
        
        tokio::time::sleep(Duration::from_secs(2)).await;
    }
    
    Err(format!("Î∞©Î¨∏ ÏãúÍ∞Ñ({})ÏùÑ ÏÑ†ÌÉùÌï† Ïàò ÏóÜÏäµÎãàÎã§.", visit_time))
}

// 7. Îã§Ïùå Î≤ÑÌäº ÌÅ¥Î¶≠ (ÎÇ†Ïßú/ÏãúÍ∞Ñ ÏÑ†ÌÉù ÌõÑ)
pub async fn click_next_button(page: &Page) -> Result<(), String> {
    println!("‚û°Ô∏è Îã§Ïùå Î≤ÑÌäº Ï∞æÎäî Ï§ë...");
    tokio::time::sleep(Duration::from_secs(2)).await;

    for attempt in 0..3 {
        println!("‚û°Ô∏è Îã§Ïùå Î≤ÑÌäº ÌÅ¥Î¶≠ ÏãúÎèÑ {}/3", attempt + 1);
        
        let next_click_js = r#"
            (() => {
                const nextBtn = document.querySelector('button[name="verification"]');
                if (nextBtn && window.getComputedStyle(nextBtn).display !== 'none') {
                    console.log('Îã§Ïùå Î≤ÑÌäº Ï∞æÏùå');
                    nextBtn.scrollIntoView({behavior: 'instant', block: 'center'});
                    nextBtn.click();
                    return true;
                }
                return false;
            })()
        "#;

        match page.evaluate_expression(next_click_js.to_string()).await {
            Ok(result) => {
                if let Ok(success) = result.into_value::<bool>() {
                    if success {
                        println!("‚úÖ Îã§Ïùå Î≤ÑÌäº ÌÅ¥Î¶≠ ÏôÑÎ£å");
                        tokio::time::sleep(Duration::from_secs(1)).await; // Îπ†Î•∏ ÏßÑÌñâ
                        return Ok(());
                    }
                }
            }
            Err(_) => {}
        }
        
        tokio::time::sleep(Duration::from_secs(1)).await;
    }
    
    Err("Îã§Ïùå Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.".to_string())
}

// 8. PASS Ïù∏Ï¶ù Ï≤òÎ¶¨ (ÌåùÏóÖÏ∞Ω ÎåÄÍ∏∞)
pub async fn handle_pass_authentication(page: &Page, carrier: &str) -> Result<(), String> {
    println!("üîê PASS Ïù∏Ï¶ù Ï≤òÎ¶¨ ÏãúÏûë - ÌÜµÏã†ÏÇ¨: {}", carrier);
    tokio::time::sleep(Duration::from_secs(2)).await;

    // ÌÜµÏã†ÏÇ¨ ÏÑ†ÌÉù ÏãúÎèÑ
    let carrier_select_js = format!(r#"
        (() => {{
            const targetCarrier = '{}';
            const elements = document.querySelectorAll('button, a, option');
            
            for (const el of elements) {{
                const text = el.textContent.trim() || el.value;
                const visible = window.getComputedStyle(el).display !== 'none';
                
                if (visible && text.includes(targetCarrier)) {{
                    console.log('ÌÜµÏã†ÏÇ¨ Î≤ÑÌäº Ï∞æÏùå:', text);
                    if (el.tagName === 'OPTION') {{
                        el.selected = true;
                        const select = el.closest('select');
                        if (select) select.dispatchEvent(new Event('change'));
                    }} else {{
                        el.click();
                    }}
                    return true;
                }}
            }}
            return false;
        }})()
    "#, carrier);

    match page.evaluate_expression(carrier_select_js).await {
        Ok(result) => {
            if let Ok(success) = result.into_value::<bool>() {
                if success {
                    println!("‚úÖ ÌÜµÏã†ÏÇ¨ ÏÑ†ÌÉù ÏôÑÎ£å: {}", carrier);
                } else {
                    println!("‚ö†Ô∏è ÌÜµÏã†ÏÇ¨ ÏûêÎèô ÏÑ†ÌÉù Ïã§Ìå®");
                }
            }
        }
        Err(_) => {
            println!("‚ö†Ô∏è ÌÜµÏã†ÏÇ¨ ÏûêÎèô ÏÑ†ÌÉù Ïã§Ìå®");
        }
    }

    println!("üì± QR ÏΩîÎìú Ïù∏Ï¶ùÏùÑ ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî. ÏÇ¨Ïö©Ïûê Í∞úÏûÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
    println!("‚è≥ Ïù∏Ï¶ù ÏôÑÎ£åÍπåÏßÄ ÎåÄÍ∏∞ Ï§ë... (ÏµúÎåÄ 120Ï¥à)");

    // PASS Ïù∏Ï¶ù ÌåùÏóÖÏ∞ΩÏù¥ ÏÇ¨ÎùºÏßà ÎïåÍπåÏßÄ ÎåÄÍ∏∞
    for wait_attempt in 0..60 {
        tokio::time::sleep(Duration::from_secs(2)).await;
        
        // ÌåùÏóÖÏ∞Ω ÎòêÎäî Ïù∏Ï¶ùÏ∞ΩÏù¥ ÏÇ¨ÎùºÏ°åÎäîÏßÄ ÌôïÏù∏
        let popup_check_js = r#"
            (() => {
                // 1. ÏÉà Ï∞Ω Ï≤¥ÌÅ¨
                if (window.opener) {
                    return false; // ÌåùÏóÖÏ∞ΩÏóê ÏûàÏùå
                }
                
                // 2. iframe Ï≤¥ÌÅ¨
                const authIframes = document.querySelectorAll('iframe[src*="pass"], iframe[src*="auth"], iframe[src*="okname"]');
                const visibleIframes = Array.from(authIframes).filter(iframe => 
                    window.getComputedStyle(iframe).display !== 'none'
                );
                
                // 3. Î™®Îã¨/ÌåùÏóÖ Ï≤¥ÌÅ¨
                const modals = document.querySelectorAll('.modal, .popup, .dialog');
                const visibleModals = Array.from(modals).filter(modal => 
                    window.getComputedStyle(modal).display !== 'none'
                );
                
                // 4. Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥ ÏûÖÎ†• ÌèºÏù¥ ÎÇòÌÉÄÎÇ¨ÎäîÏßÄ Ï≤¥ÌÅ¨
                const contactForm = document.querySelector('input[name="email"]');
                const contactFormVisible = contactForm && window.getComputedStyle(contactForm).display !== 'none';
                
                return visibleIframes.length === 0 && visibleModals.length === 0 && contactFormVisible;
            })()
        "#;

        match page.evaluate_expression(popup_check_js.to_string()).await {
            Ok(result) => {
                if let Ok(auth_complete) = result.into_value::<bool>() {
                    if auth_complete {
                        println!("‚úÖ PASS Ïù∏Ï¶ù ÏôÑÎ£å (Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥ ÏûÖÎ†• Îã®Í≥ÑÎ°ú ÏßÑÌñâ)");
                        return Ok(());
                    }
                }
            }
            Err(_) => {}
        }
        
        if wait_attempt % 10 == 9 { // 20Ï¥àÎßàÎã§ ÏÉÅÌÉú Ï∂úÎ†•
            println!("‚è≥ PASS Ïù∏Ï¶ù ÎåÄÍ∏∞ Ï§ë... ({}Ï¥à Í≤ΩÍ≥º)", (wait_attempt + 1) * 2);
        }
    }
    
    Err("PASS Ïù∏Ï¶ù ÏãúÍ∞Ñ Ï¥àÍ≥º (120Ï¥à)".to_string())
}

// 9. Ïù¥Î©îÏùº ÏûÖÎ†• Î∞è ÏµúÏ¢Ö ÏòàÏïΩ (Ï†ïÌôïÌïú ÏÖÄÎ†âÌÑ∞)
pub async fn submit_final_reservation(page: &Page, email: &str) -> Result<(), String> {
    println!("üìß Ïù¥Î©îÏùº ÏûÖÎ†• Î∞è ÏµúÏ¢Ö ÏòàÏïΩ Ï≤òÎ¶¨");
    tokio::time::sleep(Duration::from_secs(2)).await;

    // Ïù¥Î©îÏùº ÏûÖÎ†•
    let email_input_js = format!(r#"
        (() => {{
            const email = '{}';
            const emailInput = document.querySelector('input[name="email"]');
            
            if (emailInput && window.getComputedStyle(emailInput).display !== 'none') {{
                emailInput.value = email;
                emailInput.dispatchEvent(new Event('input'));
                emailInput.dispatchEvent(new Event('change'));
                console.log('Ïù¥Î©îÏùº ÏûÖÎ†• ÏôÑÎ£å:', email);
                return true;
            }}
            return false;
        }})()
    "#, email);

    match page.evaluate_expression(email_input_js).await {
        Ok(result) => {
            if let Ok(success) = result.into_value::<bool>() {
                if success {
                    println!("‚úÖ Ïù¥Î©îÏùº ÏûÖÎ†• ÏôÑÎ£å: {}", email);
                } else {
                    println!("‚ö†Ô∏è Ïù¥Î©îÏùº ÏûÖÎ†• Ïã§Ìå®");
                }
            }
        }
        Err(_) => {
            println!("‚ö†Ô∏è Ïù¥Î©îÏùº ÏûÖÎ†• Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    }

    tokio::time::sleep(Duration::from_secs(1)).await;

    // ÎßàÏºÄÌåÖ ÎèôÏùò Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÑ†ÌÉù
    let checkbox_js = r#"
        (() => {
            const consentCheckbox = document.querySelector('input[name="reception_consent"]');
            
            if (consentCheckbox && window.getComputedStyle(consentCheckbox).display !== 'none') {
                if (!consentCheckbox.checked) {
                    consentCheckbox.click();
                    console.log('ÎßàÏºÄÌåÖ ÎèôÏùò Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÑ†ÌÉù ÏôÑÎ£å');
                    return true;
                }
                return true; // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎê®
            }
            return false;
        })()
    "#;

    match page.evaluate_expression(checkbox_js.to_string()).await {
        Ok(result) => {
            if let Ok(success) = result.into_value::<bool>() {
                if success {
                    println!("‚úÖ ÎßàÏºÄÌåÖ ÎèôÏùò Ï≤¥ÌÅ¨Î∞ïÏä§ Ï≤òÎ¶¨ ÏôÑÎ£å");
                } else {
                    println!("‚ö†Ô∏è ÎßàÏºÄÌåÖ ÎèôÏùò Ï≤¥ÌÅ¨Î∞ïÏä§ Ï≤òÎ¶¨ Ïã§Ìå®");
                }
            }
        }
        Err(_) => {}
    }

    tokio::time::sleep(Duration::from_secs(1)).await;

    // ÏµúÏ¢Ö Ï†úÏ∂ú Î≤ÑÌäº ÌÅ¥Î¶≠
    let submit_js = r#"
        (() => {
            const submitBtn = document.querySelector('button[type="submit"][name="submit_appointment"]');
            
            if (submitBtn && window.getComputedStyle(submitBtn).display !== 'none') {
                console.log('ÏµúÏ¢Ö Ï†úÏ∂ú Î≤ÑÌäº Ï∞æÏùå:', submitBtn.textContent.trim());
                submitBtn.scrollIntoView({behavior: 'instant', block: 'center'});
                submitBtn.click();
                return true;
            }
            return false;
        })()
    "#;

    match page.evaluate_expression(submit_js.to_string()).await {
        Ok(result) => {
            if let Ok(success) = result.into_value::<bool>() {
                if success {
                    println!("‚úÖ ÏµúÏ¢Ö Ï†úÏ∂ú Î≤ÑÌäº ÌÅ¥Î¶≠ ÏôÑÎ£å");
                    tokio::time::sleep(Duration::from_secs(2)).await; // Ï†úÏ∂ú ÌõÑ ÎåÄÍ∏∞
                    return Ok(());
                }
            }
        }
        Err(_) => {}
    }
    
    Err("ÏµúÏ¢Ö Ï†úÏ∂ú Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.".to_string())
}

// 10. ÏÑ±Í≥µ ÌéòÏù¥ÏßÄ ÌôïÏù∏
pub async fn check_success_page(page: &Page) -> Result<bool, String> {
    println!("üéâ ÏòàÏïΩ ÏÑ±Í≥µ Ïó¨Î∂Ä ÌôïÏù∏ Ï§ë...");
    tokio::time::sleep(Duration::from_secs(3)).await;

    let success_check_js = r#"
        (() => {
            const url = window.location.href;
            const body = document.body.textContent.toLowerCase();
            
            // ÌÅ¨Î°úÎÖ∏ÎîîÍ∑∏Îßà ÏÑ±Í≥µ ÌéòÏù¥ÏßÄ URL Ìå®ÌÑ¥
            const urlSuccess = url.includes('/success') || 
                             url.includes('/complete') || 
                             url.includes('/confirmation');
            
            // ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌôïÏù∏
            const bodySuccess = body.includes('ÏôÑÎ£å') ||
                              body.includes('ÏÑ±Í≥µ') ||
                              body.includes('ÏòàÏïΩÏù¥ Ï†ëÏàò') ||
                              body.includes('Ïã†Ï≤≠Ïù¥ ÏôÑÎ£å') ||
                              body.includes('Í∞êÏÇ¨Ìï©ÎãàÎã§');
            
            return urlSuccess || bodySuccess;
        })()
    "#;

    match page.evaluate_expression(success_check_js.to_string()).await {
        Ok(result) => {
            if let Ok(is_success) = result.into_value::<bool>() {
                if is_success {
                    println!("üéâ ÏòàÏïΩ ÏÑ±Í≥µ ÌôïÏù∏!");
                    return Ok(true);
                } else {
                    println!("‚ùå ÏòàÏïΩ Ïã§Ìå® ÎòêÎäî ÏÉÅÌÉú Î∂àÎ™Ö");
                    return Ok(false);
                }
            }
        }
        Err(_) => {}
    }
    
    Ok(false)
}

// ÏãúÍ∞ÑÏùÑ Î∂ÑÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
fn convert_time_to_minutes(time_str: &str) -> Result<i32, String> {
    let parts: Vec<&str> = time_str.split(':').collect();
    if parts.len() < 2 {
        return Err(format!("ÏûòÎ™ªÎêú ÏãúÍ∞Ñ ÌòïÏãù: {}", time_str));
    }
    
    let hours: i32 = parts[0].parse().map_err(|_| "ÏãúÍ∞Ñ ÌååÏã± Ïò§Î•ò")?;
    let minutes: i32 = parts[1].parse().map_err(|_| "Î∂Ñ ÌååÏã± Ïò§Î•ò")?;
    
    Ok(hours * 60 + minutes)
}

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
pub fn log_user_action(action: &str, details: &str) {
    let timestamp = chrono::Utc::now().format("%H:%M:%S");
    println!("üéØ [{}] {}: {}", timestamp, action, details);
}
